# Three-generated arrangements and freeness of continuous splines

## Loading packages
You can ensure that you have all necessary packages and functions for this tutorial by uploading the file "Scripts_for_splines_on_hyperplanes.m2" and runing it.  Alternatively, here are the functions you'll need:

```
loadPackage("HyperplaneArrangements",Reload=>true);
loadPackage("AlgebraicSplines",Reload=>true);
```

```
--Inputs: A: a hyperplane arrangement A
--Outputs: A sequence (E,I) where
--        E records the edges between vertices of Z(A)
--        I records the edge labels using the smoothness distribution r

zonotopeEdgeLabels = method()
zonotopeEdgeLabels = A ->(
    S := ring A;--get the ring of A
    hyps := A#(first keys A); --get the list of hyperplanes definining A
    M := coefficients A; --get the coefficient matrix of A
    normals := entries transpose M;
    Z := sum apply(numcols M,j->convexHull((-M_{j})|M_{j}));--get the zonotope Z(A)
    V := entries transpose vertices Z; --get vertices of Z(A)
    --the remaining code inductively builds the list of edges and edge labels
    --by cycling through the vertices of Z(A) as recorded as columns of the matrix "vertices Z"
    --and adding the vector 2v for each vector in 'normals'.  If the result is a vertex of Z(A),
    --then the corresponding edge (recorded as a pair {i,j} of column indices of the matrix "vertices Z")
    --is added to E and the corresponding edge label is added to I.
    E := {};
    I := {};
    vtxcnt := 0;
    while vtxcnt<(#V)-1 do(
	nrmcnt := 0;
	vtx := V_(vtxcnt);
	while nrmcnt<#normals do(
	    nrm := 2*normals_nrmcnt;
	    vtxc := vtx+nrm;
	    p := position(V,v->v==vtxc);
	    if not p===null then(
		E = append(E,{vtxcnt,p});
		I = append(I,hyps_(nrmcnt));
		);
	    nrmcnt=nrmcnt+1;
	    );
	vtxcnt = vtxcnt+1
	);
    (E,I,Z)
    )
```

## Freeness of continuous splines on the chambers of a three-dimensional hyperplane arrangement
In the file "Notes on presenting the non-trivial homology module for splines on fans in three dimensions" there is a proof sketched that the module of continuous splines on the chambers of a hyperplane arrangement is free if and only if the hyperplane arrangement is 3-generated.  The purpose of this tutorial is to explain what this means and see it in action using the code developed in these tutorials.

## Three-generated arrangements
We say a hyperplane arrangement is 'three-generated' if the relations among the linear forms defining the hyperplanes can be generated by relations of length three.  This is purely linear algebra.  (In the hyperplane arrangements literature, such an arrangement is also called *formal*, but we avoid this terminology because it clashes too much with a very different notion of *formal* in topology.)

```
S=QQ[x,y,z]
A=arrangement{x,y,z,x-y,x-z,y-z}
M=coefficients(A)
ker M
```
Observe that the given generators of the kernel are indeed all length three, so the arrangement A above is three-generated.

```
S=QQ[x,y,z]
A=arrangement{x,y,z,x+y+z}
M=coefficients(A)
ker M
```
Observe that there is a single relation, and it does not have length three.  So the arrangement A is not three-generated.

##How to determine if an arrangement is three-generated
It is not difficult to determine if an arrangement is three-generated, but it is not completely straightforward.  If the kernel of the coefficient matrix (that is, the space of all relations on the linear forms) happens to be generated by relations of length three, then you are lucky (as we were earlier).  However, if you happen to find generators of the kernel of the coefficient matrix and some of them do not have length three, it could just mean that you chose the 'wrong' set of generators.

Here is a way to determine if a three-dimensional central arrangement is three-generated.  There is a relation of length three between three linear forms if and only if the corresponding hyperplanes all meet along a line.  Thus to collect all relations of length three, we can call 'flats(2,A)' to get the codimension two flats.

Then we collect the relations