------------------------------------------------------------------------------------------------------------------
--Code for checking examples in the preprint "Koszul multi-Rees algebras of principal L-Borel ideals"-------------
------------------------------------------------------------------------------------------------------------------

--This loads code for implementing the Borel Sort algorithm (Algorithm 1).
--To use, download the BorelSort.m2 file and replace the path "~/Dropbox..." below with
--the local path to your download of BorelSort.m2
load("~/Dropbox/Multi-ReesAlgebras/BorelSort.m2")

-----------------------------------------------------------------------------------------------------------------
----Example 4.3
-----------------------------------------------------------------------------------------------------------------
S=QQ[x_0..x_4]
M=x_1*x_3^2*x_4^2;
I=monomialIdeal borel matrix{{M}};
VARS=I_*;
DEGS=apply(VARS,v->flatten exponents v);
--Create ring multi-graded by the toric map associated to VARS, with lex order
R=QQ[apply(VARS,v->((symbol T)_v)),MonomialOrder=>Lex,Degrees=>DEGS]
--The next line is the toric map associated to VARS
phi=map(S,R,VARS)
MD=x_0^2*x_1^5*x_2^13*x_3^7*x_4^3;
--The next line computes the fiber over MD (represented as an appropriately graded part of R)
BS=basis(flatten exponents MD,R);--4742 factorizations! This will take a few seconds.
--the next line should return the claimed Borel sort in Example 4.3
borelSort(M,MD)
--the next line verifies that the Borel sort of M with respect to MD is the
--lexicographically least product in the fiber over MD.  It takes a few seconds
--to compute, but should return 'true'
(first sort flatten entries BS)==product(apply(borelSort(M,MD),m->T_m))


--------------------------------------------------------------------------------------------------------------------------------
---- The following code provides a check that the Borel sort algorithm returns the lexicographically least product in the
---- fiber over a given monomial MD for a random choices of degree d monomial M in n+1 variables,
---- where MD is selected randomly from the generators of Borel(M^k) (MD factors into k factors from Borel(M))
--------------------------------------------------------------------------------------------------------------------------------
--n+1 is the number of variables
n=3;
--define polynomial ring
S=QQ[x_0..x_n];
--degree of Borel generator
d=5;
--B is the set of all monomials of degree d
B=basis(d,S);
--M is a random monomial of degree d
M=first entries(B_(random(0,numcols B-1)));
--I is the principal Borel ideal generated by M
I=monomialIdeal borel matrix{{M}};
--VARS is the set of generators of I
VARS=I_*;
--DEGS is the set of exponents of generators of I
DEGS=apply(VARS,v->flatten exponents v);
--R is the polynomial ring multi-graded by the toric ring K[I]
R=QQ[apply(VARS,v->((symbol T)_v)),MonomialOrder=>Lex,Degrees=>DEGS]
--k is the number of factors
k=6;
--Ik is the kth power of I
Ik=monomialIdeal borel matrix{{M^k}};
--MD is a random monomial that factors as a product of k factors from generators of I
MD=(Ik_*)_(random(0,length(Ik_*))-1);
--BS is the set of all possible factorizations of MD into k factors from the generators of I
BS=basis(flatten exponents MD,R);
--bSort is the borel sort of MD with respect to M
bSort=borelSort(M,MD)
--The next line verifies that the lexicographically least factorization is provided by the borel sort algorithm (should return 'true')
(first sort flatten entries BS)==product(apply(bSort,m->T_m))


-----------------------------------------------------------------------------------------------------------------
----Verify that the multi-Rees algebra of the ideals in Example 5.8 has a Grobner basis of quadrics
----with respect to the monomial order in Convention 6.1, as guaranteed by Theorem 4
-----------------------------------------------------------------------------------------------------------------
S=QQ[x_1,x_2,x_3,x_4,t_1,t_2,t_3,t_4,t_5]
I1=(monomialIdeal(x_4))*t_1
I2=(monomialIdeal(x_3^2,x_3*x_4))*t_2
I3=(monomialIdeal(x_2^2,x_2*x_3,x_2*x_4,x_3^2,x_3*x_4))*t_3
I4=(monomialIdeal(x_1^3,x_1^2*x_2,x_1^2*x_3,x_1*x_2^2,x_1*x_2*x_3))*t_4
I5=(monomialIdeal(x_1^3,x_1^2*x_2,x_1*x_2^2))*t_5
--VARS orders the generators of I1,..,I5 and the variables x_1,..,x_4 in decreasing order according to Convention 6.1
VARS=join(I1_*,I2_*,I3_*,I4_*,I5_*,{x_1,x_2,x_3,x_4});
--R is the polynomial ring with a generator for every monomial in VARS, with Lexicographic order to satisfy Convention 6.1
R=QQ[apply(VARS,v->(symbol T)_v),MonomialOrder=>Lex];
--Create the toric map from R to S (this presents the multi-Rees algebra)
phi=map(S,R,VARS);
--M is the Grobner basis for ker phi with respect to the monomial order in Convention 6.1
M=gens gb ker phi;
--check that every binomial in M is quadratic
all(flatten entries M,h->(first degree h==2))
--M consists of 36 quadric binomials
