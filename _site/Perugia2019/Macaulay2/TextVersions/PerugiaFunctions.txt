---Building some helpful functions

--Row reduced echelon form function
--Input: a matrix defined over *any* field
--Output: the row reduced echelon form
rref = M->(
    F := ring(M);
    R := F[vars(0..(numcols M)-1)];
    V := transpose vars R;
    I := ideal(M*V);
    G := reverse flatten entries gens gb I;
    G = apply(G,g->(
	    c := (last(coefficients g))_(0,0);
	    sub(1/c,F)*g));
    T := gens R;
    matrix apply(G,g->apply(T,t->coefficient(t,g)))
    )

--Multiplication matrix for a ring element
--Input: a polynomial f and an ideal I (zero-dimensional!)
--Output: the multiplication matrix for f on the quotient S/I (provided I is zero-dimensional)
multiplicationMatrix = (f,I)->(
    S := ring(I);
    if dim(S/I)>0 then(
	return("Error: not a zero dimensional ideal.")
	)else(
	B := flatten entries sub(basis (S/I),S);
	M := transpose matrix apply(B,b->(
		H := (f*b)%I;
		apply(B,c->coefficient(c,H))
		));
	K := coefficientRing(S);
	(B,map(K^(numcols M),K^(numcols M),M))
	))

--Division algorithm (from CLO p.65)
divisionAlgorithm=(f,L)->(
    --get the ring in which polynomials are defined
    S := ring f;
    --initialize quotient list and remainder to zero
    quot := new MutableList from apply(L,i->0);
    rem := 0;
    p := f;
    while p != 0 do(
	i := 0;
	divisionoccurred := false;
	while i<=(length(L)-1) and not divisionoccurred do(
	    diffi := (flatten exponents leadTerm(p))-(flatten exponents leadTerm(L_i));
	    if all(diffi,i->i>=0) then(
		nqt := sub(leadTerm(p)/leadTerm(L_i),S);
		quot#i = quot#i+nqt;
		p = p-nqt*L_i;
		divisionoccurred = true;
		)else(
		i = i+1;
		));
	if not divisionoccurred then(
	    rem = rem+leadTerm(p);
	    p = p-leadTerm(p);
	    );
	);
    (toList quot,rem)	
    )

--Computing S-polynomials
--Input: two polynomials f and g
--Output: the S-polynomial of f and g
sPolynomial=(f,g)->(
    S := ring f;
    lf := leadTerm f;
    lg := leadTerm g;
    LCM := lcm(lf,lg);
    m1 := sub(LCM/lf,S);
    m2 := sub(LCM/lg,S);
    m1*f-m2*g
    )

--Buchberger's algorithm
--Input: a list L of polynomials generating some ideal (monomial order should be determined in definition of polynomial ring)
--Output: a Grobner basis with respect to the monomial order
--Comment: Macaulay2 has a 'gb' command which is much more efficient than the following code.  What you find below is the most naive implementation!
--There is at least one glaring redundancy - see if you can spot it and make the code better.  Or write your own!
buchbergerAlgorithm:=L->(
    GB := L;
    stop := false;
    while not stop do(
	rem := 0;
	i := 0;
	k := length GB;
	while (rem==0) and (i<(k-1)) do(
	    j := i+1;
	    while (rem==0) and (j<k) do(
		Sp := sPolynomial(GB_i,GB_j);
		rem = last divisionAlgorithm(Sp,GB);
		if rem != 0 then(
		    GB = append(GB,rem)
		    )else(
		    j = j+1
		    )
		);
	    if rem==0 then i = i+1
	    );
	if rem==0 then stop=true
	);
    GB
    )

--coupler curve for 4 bar mechanism with fixed vertices at (0,0) and (a,0)
--Input: x-coordinate of other fixed vertex and lengths for the five bars.
--Output: equation for coupler curve of the corresponding mechanism. 
--(this may not have real points if the lengths were not chosen compatibly)
couplerCurve=()->(
    
    )
